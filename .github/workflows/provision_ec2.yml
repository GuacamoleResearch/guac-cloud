name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  provision_environment:
    name: 'Provision EC2 instance'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # # Following used for ACT debugging
    # - name: Install Buster prereqs
    #   run: |
    #     apt update
    #     apt install unzip

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new Terraform working directory, verify the format, and execute the plan
    - name: Initialize and Plan
      working-directory: ./aws/ec2
      run: |
        terraform init
        # terraform fmt -check
        terraform plan

    # # Abort if the plan failed
    # - name: Abort on Terrafor failures
    #   if: steps.plan.outcome == 'failure'
    #   run: exit 1
      
    # Apply the plan to the environment
    - name: Apply Terraform plan
      working-directory: ./aws/ec2
      run: |
        terraform apply -auto-approve
        terraform output > ${{ github.workspace }}/terraform.output
        # cat ${{ github.workspace }}/terraform.output

    - name: Capture Terraform output
      uses:  ./private-actions/shellify-terraform-output
      with:
        terraform-output-file: ${{ github.workspace }}/terraform.output
        shell-output-file: ${{ github.workspace }}/tf_output.sh

    - name: Persist Terraform output
      uses: actions/upload-artifact@v2
      with:
        name: terraform-output
        path: ${{ github.workspace }}/tf_output.sh

  # verify_environment:
  #   name: 'Verify EC2 instance'
  #   runs-on: ubuntu-latest
  #   needs: provision_environment
    
  #   steps:
    - name: Restore Terraform output
      uses: actions/download-artifact@v2
      with:
        name: terraform-output

    
    - name: Verify endpoint
      run: |
        echo 'Retrieved Terraform output: '
        cat ${{ github.workspace }}/tf_output.sh
        . ${{ github.workspace }}/tf_output.sh
        echo 'Pinging endpoint... '
        curl ${url}

  # destroy_environment:
  #   name: 'Destrory EC2 instance'
  #   runs-on: ubuntu-latest
  #   needs: verify_environment
    
  #   steps:
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new Terraform and destroy the environment
    - name: Destroy environment
      run: |
        # terraform init
        terraform destroy






# ----
