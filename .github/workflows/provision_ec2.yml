name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: ./aws/ec2

jobs:
  provision_environment:
    name: 'Provision EC2 instance'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # # Following used for ACT debugging
    # - name: Install Buster prereqs
    #   run: |
    #     apt update
    #     apt install unzip

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new Terraform working directory, verify the format, and execute the plan
    - name: Initialize and Plan
      run: |
        terraform init
        # terraform fmt -check
        terraform plan

    # Abort if the plan failed
    - name: Abort on Terrafor failures
      if: steps.plan.outcome == 'failure'
      run: exit 1
      
    # Apply the plan to the environment
    - name: Apply Terraform plan
      run: |
        terraform apply -auto-approve
        URL=`terraform output -raw url`
        echo "--> $URL <--"
        echo "Retrieved endpoint: $URL"
    
    - name: Debug
      run: 'echo "Retrieved endpoint: $URL"'
  
    - name: Save endpoint
      id: persist_url
      uses: noobly314/share-data@v1
      with:
        share-id: release_url
        mode: set
        key: url
        value: "ec2-54-190-155-39.us-west-2.compute.amazonaws.com:80"

  verify_environment:
    name: 'Verify EC2 instance'
    runs-on: ubuntu-latest
    needs: provision_environment
    
    steps:
    - name: Restore endpoint
      id: restore_url
      uses: noobly314/share-data@v1
      with:
        share-id: release_url
        mode: get
        key: url

    - name: Echo endpoint
      run: |
        echo Retrieved...
        echo $url
    
    - name: Verify endpoint
      run: |
        curl ${url}
    
  destroy_environment:
    name: 'Destrory EC2 instance'
    runs-on: ubuntu-latest
    needs: verify_environment
    
    steps:
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new Terraform and destroy the environment
    - name: Destroy environment
      run: |
        # terraform init
        terraform destroy






# ----
